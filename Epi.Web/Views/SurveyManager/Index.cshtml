@model Epi.Web.MVC.Models.PublishModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_LayoutPage2.cshtml";
}
<script src="@Url.Content("~/Scripts/c3.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/d3-5.8.2.min.js")" type="text/javascript"></script>
<link href="@Url.Content("~/Content/css/c3.min.css")" rel="Stylesheet" type="text/css" />
<script src="https://cdn.jsdelivr.net/npm/json2csv"></script>
@*<script src="@Url.Content("~/Scripts/jquery-1.9.1.js")" type="text/javascript"></script>*@

<style>

    table {
        font-family: arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
    }

    td, th {
        border: 1px solid #dddddd;
        text-align: left;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #dddddd;
    }

    .TermsSpan {
        cursor: pointer;
        color: blue;
        text-decoration: underline;
    }
    /*.TermsSpan:hover {
             text-decoration:none;
             text-shadow: 1px 1px 1px #555;
        }*/
    .pageheader {
        font: 24px Segoe UI;
        color: #286655;
    }

    .h2header {
        font: 18px Segoe UI;
        color: #286655;
        font-weight: 400;
        margin: 15px 0 0 0 !important;
    }

    .accountdiv {
        float: none;
        align-self: center;
        min-width: 200px;
        background: #ffffff;
        border: 1px solid #bfbfbf;
        border-radius: 3px;
        padding: 25px 10px 25px 25px;
    }

    .accountdiv2 {
        float: none;
        /*width: 700px;*/
        background: #EBEFF5;
        border: 1px solid #bfbfbf;
        border-radius: 15px;
        padding: 10px 10px 10px 20px;
    }

    .introdiv {
        float: left;
        width: 355px;
        padding: 0 10px 0 0;
    }



    .termsofuse {
        width: 790px;
        padding: 5px;
        height: 300px;
        border: 2px solid #bfbfbf;
        overflow: auto;
    }




    [disabled] {
        color: #737882;
        background-color: #dfdfce;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -o-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -webkit-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
        -moz-box-shadow: 0 2px 6px rgba(0,0,0,0.1), inset 0 1px rgba(255,255,255,0.3), inset 0 10px rgba(255,255,255,0.2), inset 0 10px 20px rgba(255,255,255,0.25), inset 0 -15px 30px rgba(0,0,0,0.3);
    }

        [disabled]:hover {
            background-color: #dfdfce;
        }

    /*div.upload input {
            display: block !important;
            width: 157px !important;
            height: 57px !important;
            opacity: 0 !important;
            overflow: hidden !important;
        }
         input[type="file"] {
            display: none;
        }*/
    .custom-file-upload {
        border: 1px solid #ccc;
        display: inline-block;
        padding: 6px 12px;
        cursor: pointer;
    }



    .field-validation-error {
        color: #bd0000;
        font-size: 14px;
    }

    .field-validation-valid {
        display: none;
    }

    .input-validation-error {
        border: 1px solid #bd0000;
        background-color: #fff2f2;
    }

    .validation-summary-errors {
        font-weight: bold;
        color: #ff0000;
    }

    .validation-summary-valid {
        display: none;
    }

    /*#container {
            width: 100% !important;
            margin-top: 0px !important;
            border: 0px solid red;
        }*/

    #footer {
        /*position: initial;*/
        position: fixed;
        width: 100%;
        bottom: 0;
        height: 6%;
    }
    /*footer {
       position:absolute;
       bottom:0;
       width:100%;
       height:100px;
    }*/
    /*html,body{
        height: 100%
    }*/



</style>
<script type="text/javascript">
    $(document).ready(function () {


        $('.btn').on('click', function () {
            var $this = $(this);
            $this.button('loading');
            setTimeout(function () {
                $this.button('reset');
            }, 8000);
        });

        $("#TermsDialog").dialog({
            autoOpen: false,
            show: "blind",
            hide: "blind",
            resizable: false,
            height: 600,
            width: 500,

            modal: true
        });
        if ($('#DashboardDivState').val() == "True") {
            Toggle('DashboardDivExpand');
        }
        if ($('#PublishDivState').val() == "True") {
            Toggle('PublishDivExpand');
        }
        if ($('#RePublishDivState').val() == "True") {
            Toggle('RePublishDivExpand');
        }
        if ($('#DownLoadDivState').val() == "True") {
            Toggle('DownloadDivExpand');
        }

        if ($('#SendEmaiDivState').val() == "True") {
            Toggle('SendEmailDivExpand');
        }

        if ($('#SetJsonDivState').val() == "True") {
            Toggle('SetJsonDivExpand');
        }
        if ($('#ViewRecordsDivState').val() == "True") {
            Toggle('ViewRecordsDivExpand');
        }
        $('#SurveyIdDiv').hide();
       //$('#PublishDiv').hide();
       //$('#DownLoadDiv').hide();
       //$('#RequiredLable').hide();
        //   alert($('#ExistingSurvey_Hidden').val());
        if ($('#ExistingSurvey_Hidden').val() == 'True')
        {

            $('#ExistingSurvey').attr('checked', 'checked');
            $('#SurveyIdDiv').show();

        }

        //('#Path').val('');
        //('#Newfile').val('');


        });

    function EnablePublishButton(obj) {
        // alert();
        //Term of use
        // $('#PublishSurvey').prop("disabled", true);
        //$('#TermOfUse').hide();

        //$("#TermOfUseLable").click(function () {
        //    if ($('#TermOfUse').is(":visible")) {
        //        $('#TermOfUse').hide();
        //    } else {

        //        $('#TermOfUse').show();
        //    }
        //});


        if (obj.checked) {
            $('#PublishSurvey').prop("disabled", false);
        } else {
            $('#PublishSurvey').prop("disabled", true);
        }

    }
            function clear() {
                document.getElementById('valerr').innerHTML = '';
            }

            function OpenFile()
            {
            $('a[href$=".xlsx"]').prop('target', '_blank');

        }
        function OpenFile_txt() {


            $("#TermsDialog").dialog("open");
            $("span.ui-dialog-title").text('Terms of service and conditions of use');
        }
        function HidUnhidSurveyId(value) {


            if ($('#ExistingSurvey').is(':checked')) {
                $('#SurveyIdDiv').show();
            } else {
                $('#SurveyIdDiv').hide();

            }
        }



        function ChangeText(oFileInput, sTargetID) {

           // document.getElementById(sTargetID).value = oFileInput.value;
            $('.' + sTargetID).val(oFileInput.value);
        }
        function OpenSurvey(SurveyURL) {

            window.open(SurveyURL);
        }
        function copyToClipboard() {

            var copyTextarea = document.getElementById('FormInfo');
            copyTextarea.select();
            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Copying text command was ' + msg);
            } catch (err) {
                console.log('Oops, unable to copy');
               alert("Your browser doesn't support copying towards the clipboard. Copy the text manually.")
            }
        }





        //('PublishDivExpand')
        function Toggle(Obj){
            switch (Obj) {
                case "DashboardDivExpand":
                    $('.Dashboardcollaps').removeAttr("style");
                    $('.Dashboardcollaps').css({ "cursor": "pointer"});
                    $('.Dashboardexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#DashboardDiv').css({ "display": "", "visibility": "" });
                    $('#DashboardDivState').val('true');
                    $(".leftNav").css({ "background-color":"#3c3c3c"});
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".contentDashboard").css({ "background-color": "#f3f3f3" });
                    $('.DashboardExpand').css({ "color": "#3c3c3c" });
                   // $('#DashboardDiv').load();
                      var str = "";
                    $(".Dashboard option:selected").each(function () {
                        str += $(this).val() + " ";
                    });
                  //  alert (str)
                    if (str.trim() != "" && str != null)
                    {
                        GetDashboardInfo(str);
                    }
                    break;
                case "PublishDivExpand":
                    $('.Publishcollaps').removeAttr("style");
                    $('.Publishcollaps').css({ "cursor": "pointer"});
                    $('.Publishexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#PublishDiv').css({ "display": "", "visibility": "" });
                    $('#PublishDivState').val('true');
                    $(".leftNav").css({ "background-color":"#3c3c3c"});
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".contentPublish").css({ "background-color": "#f3f3f3" });
                    $('.publishExpand').css({ "color": "#3c3c3c" });
                    break;
                case "RePublishDivExpand":
                    $('#RePublishDivState').val('true');
                    $('.RePublishcollaps').removeAttr("style");
                    $('.RePublishcollaps').css({ "cursor": "pointer" });
                    $('.RePublishexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#RePublishDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentRePublish").css({ "background-color": "#f3f3f3" });
                    $('.rePublishExpand').css({ "color": "#3c3c3c" });
                    break;
                case "DownloadDivExpand":
                    $('#DownLoadDivState').val('true');
                    $('.Downloadcollaps').removeAttr("style");
                    $('.Downloadcollaps').css({ "cursor": "pointer" });
                    $('.Downloadexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#DownLoadDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentDownLoad").css({ "background-color": "#f3f3f3" });
                    $('.downloadExpand').css({ "color": "#3c3c3c" });
                    break;
                case "SendEmailDivExpand":
                    $('#SendEmaiDivState').val('true');
                    $('.SendEmailcollaps').removeAttr("style");
                    $('.SendEmailcollaps').css({ "cursor": "pointer" });
                    $('.SendEmailexpand').css({ "display": "none", "visibility": "collapse" });
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#SendEmailDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentSendEmail").css({ "background-color": "#f3f3f3" });
                    $('.sendEmailExpand').css({ "color": "#3c3c3c" });

                    break;
                case "SetJsonDivExpand":
                    $('#SetJsonDivState').val('true');
                    $('.SetJsoncollaps').removeAttr("style");
                    $('.SetJsoncollaps').css({ "cursor": "pointer" });
                    /*$('.SetJsonExpand').css({ "display": "none", "visibility": "collapse" });*/
                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#SetJsonDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentSetJson").css({ "background-color": "#f3f3f3" });
                    $('.SetJsonExpand').css({ "color": "#3c3c3c" });

                    break;
                case "ViewRecordsDivExpand":
                    $('#ViewRecordsDivState').val('true');
                    $('.ViewRecordscollaps').removeAttr("style");
                    $('.ViewRecordscollaps').css({ "cursor": "pointer" });

                    $('.contentContainer').css({ "display": "none", "visibility": "collapse" });
                    $('#ViewRecordsDiv').css({ "display": "", "visibility": "" });
                    $('.navLink').css({ "color": "#ffffff" });
                    $(".leftNav").css({ "background-color": "#3c3c3c" });
                    $(".contentViewRecords").css({ "background-color": "#f3f3f3" });
                    $('.ViewRecordsExpand').css({ "color": "#3c3c3c" });

                    break;
                default:
            }

    }

        function GetSurveyInfo()
        {
            var SurveyId = $('#RepublishSurveyKey').val();

            var ActionUrl = '@Url.Action("GetSurveyInfo", "SurveyManager")' + '?surveyid=' + SurveyId;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {

                $('#EndDateUpdate').val(data.EndDate);
                $('#RePublishSurveyName').val(data.SurveyName);

                if (data.IsDraft)
                {
                    $('#RepublishSurveyMode').val(0);
                }
                else
                {
                    $('#RepublishSurveyMode').val(1);
                }
            }
            function errorFunc(data) {
                alert('failed');
            }
    }
    function GetJsonHeader()
    {

            var SurveyId = $('#SurveyKey').val();
        var PublisherKey = $('#UserPublishKey').val();
     
        if ($('#SurveyMode').val() == 0) {
            IsDraft = true;

        } else { IsDraft = false}
            var ActionUrl = '@Url.Action("GetJsonHeader", "SurveyManager")' + '?surveyid=' + SurveyId + '&PublisherKey=' + PublisherKey +'&IsDraft=' + IsDraft;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {

               //alert(data)
              
                $('#JsonHeadder').val(data);
            }
            function errorFunc(data) {
                alert('failed');
        }

        }
     function GetJsonResponse()
     {
          GetJsonHeader()
          var SurveyId = $('#SurveyKey').val();
          var PublisherKey = $('#UserPublishKey').val();

         

        if ($('#SurveyMode').val() == 0) {
            IsDraft = true;
            } else { IsDraft = false}
            var ActionUrl = '@Url.Action("GetJsonResponse", "SurveyManager")' + '?surveyid=' + SurveyId + '&PublisherKey=' + PublisherKey +'&IsDraft=' + IsDraft;

            $.ajax({
                url: ActionUrl,
                type: 'POST',
                contentType: 'application/json; charset=utf-8',
                //  data: $('#myform').serialize(),
                //data:JSON.stringify(model),
                dataType: "json",
                //cache: false,
                async: false,
                success: successFunc,
                error: errorFunc
            });
            function successFunc(data)
            {
               
                if (JSON.stringify(data) != 'false') {

                     $('#UserPublishKey').removeClass('input-validation-error');
                    $('#DownloadError').text('');

                    var FileName = $('#FileName').val();
                    var Headder = $.parseJSON($('#JsonHeadder').val());
                    var obj = $.parseJSON(data);
                    exportCSVFile(Headder, obj, FileName);
                }
                else

                {
                    
                    //alert('Please validate the Security Token and try again');
                    //input-validation-error valerr
                    $('#UserPublishKey').addClass('input-validation-error');
                    $('#DownloadError').text('Please validate the Security Token and try again');
                }
            }
            function errorFunc(data) {
                alert('failed');
            }
    }


    function convertToCSV(objArray)
    {
    var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
    var str = '';
       
    for (var i = 0; i < array.length; i++) {
        var line = '';
         
        for (var index in array[i]) {
         //  alert(index)
            if (line != '') line += ','

          //  line += array[i][index];
            //line += `\"${array[i][index]}\"`;
               line +="\"" + array[i][index] + "\"";
        }

        str += line + '\r\n';
    }
   
    return str;
  }

    function exportCSVFile(headers, items, fileTitle) {

    if (headers) {
        items.unshift(headers);
    }

    // Convert Object to JSON
    var jsonObject = JSON.stringify(items);
 
    var csv = convertToCSV(jsonObject);
        
      //  alert(items.length)
    if (items.length> 1 ) {
        var exportedFilenmae = fileTitle + '.csv'; //|| 'export.csv';

        var blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, exportedFilenmae);
        } else {
            var link = document.createElement("a");
            if (link.download !== undefined) { // feature detection
                // Browsers that support HTML5 download attribute
                var url = URL.createObjectURL(blob);
                link.setAttribute("href", url);
                link.setAttribute("download", exportedFilenmae);
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            }
        }
    } else {

        alert("No records found for the download criteria entered.")

    }
}

    function ChangeOrg(el)
    {

       var e = document.getElementById(el);

        if (e.options[e.selectedIndex].value == 1)
        {
             var ActionUrl = '@Url.Action("Index", "SurveyManager")' + '?ResetOrg=true' ;
            window.location.href = ActionUrl
        }

    }

</script>

@*<div style="min-height:950px; max-height:100%;">*@   @* position: absolute;top: 0; right: 0; bottom: 0; left: 0; *@

<div>

    @using (Html.BeginForm("Index", "SurveyManager", null, FormMethod.Post, new { enctype = "multipart/form-data" }))
    {

        @*<div class="container col-lg-12">*@
        <div id="header" class="row nopadding">
            <div class="col-lg-9">
                <h1 style="text-indent: 0 !important; font-family:Segoe UI !important;">

                    <img src="~/Content/images/ei_logomark_wht_outln_50px.png" /> Epi Info™ Web Survey
                </h1>
            </div>
            @if (Model.IsValidOrg && !string.IsNullOrEmpty(Model.OrgName))
            {
                <div class="col-lg-3">

                    Organization:<select id="OrgName" name="OrgName" style="width:250px; color:black" onchange="ChangeOrg('OrgName')">
                        <option value="0">  @Model.OrgName</option>
                        <option value="1" style="color:blue;text-decoration:underline !important;">Change Organization</option>
                    </select>

                </div>
            }
        </div>
        @*</div>*@
        <div class="row">



            <p id="valerr" style="text-align:left;margin-top: 0;margin-bottom: 0px; font-size: 9pt; font-weight:bold;">
                @Html.ValidationMessage("Error")
            </p>
        </div>



        if (!Model.SuccessfulPublish)
        {
            if (!Model.IsValidOrg)
            {
                <div id="contentOrganization" style="margin:1em; margin-top:50px">
                    <div id="OrgnizationDiv" class="accountdiv" style="margin-bottom: 100px; align-self:center">
                        <p style="text-align:center;margin-top: 0;margin-bottom: 0px; font-size: 22pt; font-weight:bold; color:#3f3f3f">
                            Welcome to Epi Info Survey Manager

                        </p>
                        <p style="text-align:center;margin-top: 0;margin-bottom: 0px;  font-size: 11pt; color:#3f3f3f">
                            Enter an Organization Key or a Personal Key to begin
                        </p>
                        <br>
                        <br>
                        @*<p style="text-align:right;margin-top: 0;margin-bottom: -29px; font-size: 9pt; font-weight:bold;">* indicates required fields</p>

                        *@
                        <p style="text-align:center; margin-left:15px">

                            @*<label class="accountlabel" id="OrgKeylabel">*Organization Key:</label><br>*@
                            @Html.TextBoxFor(m => m.OrganizationKey, new { @class = "Account" })
                            <input class="submits create" style="width:70px;" type="submit" name="ValidateOrganization" id="ValidateOrganization" onclick=" " value="Submit" /><br>
                            @Html.ValidationMessageFor(m => m.OrganizationKey, null, new { @class = "required" })

                        </p>
                    </div>
                </div>
            }
            else
            {
                @*<div class="container">*@
                <div class="row nopadding " style="">
                    <div class="col-sm-pull-2" style="float:left; background-color: #313131; height:850px ">

                        @*<div style="float:left; background-color: #313131; height:810px">*@

                        <div class="contentPublish leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink publishExpand" onclick="Toggle('PublishDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                Publish a new survey
                            </a>

                        </div>
                        <div class="contentRePublish leftNav">
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink rePublishExpand" onclick="Toggle('RePublishDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> Update a survey
                            </a>

                        </div>
                        @if (System.Configuration.ConfigurationManager.AppSettings["ViewRecordsURL"] != null)
                        {
                            <div class="contentViewRecords leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink ViewRecordsExpand" onclick="Toggle('ViewRecordsDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> View Survey Responses
                                </a>
                            </div>
                        }
                        else
                        {
                            <div class="contentDownLoad leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink downloadExpand" onclick="Toggle('DownloadDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> Download responses (CSV)
                                </a>
                            </div>
                        }

                        <div class="contentSendEmail leftNav">
                            <a href="#" style="cursor:pointer;color:#ffffff" class="navLink sendEmailExpand" onclick="Toggle('SendEmailDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> Send email with survey link
                            </a>
                        </div>
                        @*<div class="contentSetJson leftNav">
                                <a href="#" style="cursor:pointer;color:#ffffff" class="navLink SetJsonExpand" onclick="Toggle('SetJsonDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" /> Generate Json Response for Surveys
                                </a>
                            </div>*@
                        <div class="contentDashboard leftNav" style="background-color:#f3f3f3;">
                            <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink DashboardExpand" onclick="Toggle('DashboardDivExpand')">
                                <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                Survey Dashboard (Beta)
                            </a>

                        </div>

                        @*<div class="contentDownLoad leftNav" style="background-color:#f3f3f3;">
                                <a href="#" style="cursor:pointer;color:#ffffff;" class="navLink downloadExpand" onclick="Toggle('DownloadDivExpand')">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                    DownLoad CSV
                                </a>

                            </div>*@

                        @*</div>*@
                    </div>
                    <!--end of nav-->

                    <div class="col-lg-offset-10 nopadding" style="float:left; width:70%">
                        @*<div style="float:left;width: 70%">*@
                        <div id="PublishDiv" class="contentContainer" style="margin-bottom:10px; align-self:center;margin:1em;">
                            <h1>Publish A New Survey</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">
                                <div>
                                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span> Excel based survey:</label> <a onclick="OpenFile()" style="text-decoration:none!important; font-size:14px" href="~/Content/Text/Survey.xlsx">Excel Template</a><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@

                                    @Html.TextBoxFor(m => m.Path, new { @class = "Account Path" })

                                    @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
                                            Browse
                                        </label>*@
                                    <input for="file-upload" class="submits create" style="width:70px; " type="button" id="PublishButton" onclick="javascript: document.getElementById('Newfile').click();" value="Browse" />

                                    @Html.ValidationMessageFor(m => m.Path, null, new { @class = "required" })
                                    <input id="Newfile" type="file" style='visibility: hidden;' name="Newfile" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'Path');" />


                                </div>
                                <br>
                                <div>

                                    <label class="accountlabel" id="SurveyNamelabel"><span style="color:#900000;">*</span> Survey Name:</label><br>
                                    @Html.TextBoxFor(m => m.SurveyName, new { @class = "Account" }) <br>
                                    @Html.ValidationMessageFor(m => m.SurveyName, null, new { @class = "required" })
                                </div>
                                <br>
                                <div>

                                    <label style="text-align:left" class="accountlabel" id="SurveyNamelabel"><span style="color:#900000;">*</span> End Date:</label><br>
                                    @Html.TextBoxFor(m => m.EndDate, new { @class = "Account validate[required,custom[date]]  datepicker" }) <br>
                                    @Html.ValidationMessageFor(m => m.EndDate, null, new { @class = "required" })


                                </div>
                                <script>$('#EndDate').datepicker({ changeMonth: true, changeYear: true, yearRange: '-110:+10' });</script>
                                <script>$('#EndDate').BlockEnter('EndDate');</script>

                                @*<p>
                                        <input type="checkbox" id="ExistingSurvey" value="@Model.UpdateExisting" name="ExistingSurvey" for="ExistingSurveyLabel" onclick="HidUnhidSurveyId(this)" />

                                        <label class="accountlabel" id="ExistingSurveyLabel" style="width:330px;">
                                            <span style="font-weight:normal !important;">Update Existing Survey</span>
                                        </label>
                                        <div id="SurveyIdDiv">
                                            <label class="accountlabel" id="SurveyIdlabel">*Survey Id:</label><br>

                                            @Html.TextBoxFor(m => m.SurveyKey, new { @class = "Account" }) <br>
                                            @Html.ValidationMessageFor(m => m.SurveyKey, null)
                                            <br>
                                            <label class="accountlabel" id="SecurityTokenlabel">*Security Token:</label><br>

                                            @Html.TextBoxFor(m => m.UserPublishKey, new { @class = "Account" }) <br>
                                            @Html.ValidationMessageFor(m => m.UserPublishKey, null)


                                        </div>

                                    </p>*@
                                <br />
                                @if (Model.IsAuthenticated)
                                {

                                    <div style="width: 100%; display: inline;">
                                        <input type="checkbox" id="IagreeBox" for="IagreeBoxLabel" onchange="EnablePublishButton(this);" />


                                        <label class="accountlabel" for="IagreeBox" id="IagreeBoxLabel" style="width:330px;">
                                            <span style="font-weight:normal !important;">I agree to the</span>
                                            <span class="TermsSpan" style="font-weight:bold;" onclick="OpenFile_txt()">
                                                Terms of service and conditions of use

                                            </span>
                                        </label>
                                    </div>
                                    <br />
                                    <br />
                                    <input class="submits create" type="submit" disabled="disabled" name="PublishSurvey" id="PublishSurvey" value="Publish" style="margin-right:90px;" />
                                }
                                else
                                {
                                    <input class="submits create" type="submit" name="PublishSurvey" id="PublishSurvey" value="Publish" style="margin-right:90px;" />

                                }

                                <input type="hidden" id="ExistingSurvey_Hidden" value="@Model.UpdateExisting.ToString()" />
                            </div>
                        </div>

                        <div id="RePublishDiv" class="contentContainer" style="margin-bottom:10px; align-self:center; display:none; visibility:collapse;margin:1em;">
                            <h1>RePublish A Survey</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">
                                <div>

                                    <label class="accountlabel" id="FilePath1">Excel based survey:</label>
                                    @*<a onclick="OpenFile()" href="~/Content/Text/Survey.xlsx">Excel Template</a>*@ <br /><span style="font-size: 14px">This file is only needed if survey content has changed!</span><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@

                                    @Html.TextBoxFor(m => m.RepublishPath, new { @class = "Account RepublishPath" })

                                    @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
                                            Browse
                                        </label>*@
                                    <input for="file-upload" class="submits create" style="width:70px;" type="button" id="RePublishButton" onclick="javascript: document.getElementById('Newfile1').click();" value="Browse" /><br>

                                    @Html.ValidationMessageFor(m => m.RepublishPath, null, new { @class = "required" })
                                    <input id="Newfile1" type="file" style='visibility: hidden;' name="Newfile1" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'RepublishPath');" />


                                </div>
                                <label class="accountlabel" id="SurveyIdlabel1"><span style="color:#900000;">*</span> Survey Id:</label><br>

                                @Html.DropDownListFor(m => m.RepublishSurveyKey, new SelectList(Model.SurveyNameList, "Value", "Text", 0), "Select Survey", new { @class = "Account", @onchange = "GetSurveyInfo()" })<br>

                                @Html.ValidationMessageFor(m => m.RepublishSurveyKey, null)
                                <br>

                                @if (!Model.IsAuthenticated)
                                {

                                    <label class="accountlabel" id="SecurityTokenlabel1"><span style="color:#900000;">*</span> Security Token:</label><br>
                                    /**/

                                    @Html.TextBoxFor(m => m.RepublishUserPublishKey, new { @class = "Account" }) <br>
                                    @Html.ValidationMessageFor(m => m.RepublishUserPublishKey, null)<br>
                                }
                                <label class="accountlabel" id="FileName3">Survey Mode:</label><br>


                                @Html.DropDownListFor(model => model.RepublishSurveyMode, new SelectList(
                                               new List<Object> { new { value = "0", text = "Draft" }, new { value = "1", text = "Final" }, }, "value", "text", 2), new { @class = "Account" })<br>
                                @Html.ValidationMessageFor(m => m.RepublishSurveyMode, null)

                                <br />
                                <label style="text-align:left" class="accountlabel" id="SurveyNamelabel1">End Date:</label><br>
                                @Html.TextBoxFor(m => m.EndDateUpdate, new { @class = "Account validate[required,custom[date]]  datepicker" }) <br>
                                @Html.ValidationMessageFor(m => m.EndDateUpdate, null, new { @class = "required" })



                                <script>$('#EndDateUpdate').datepicker({ changeMonth: true, changeYear: true, yearRange: '-110:+10' });</script>
                                <script>$('#EndDateUpdate').BlockEnter('EndDateUpdate');</script>

                                <br />

                                <input class="submits create" type="submit" name="RePublishSurvey" id="RePublishSurvey" value="RePublish" style="margin-right:90px;" />


                                <input type="hidden" id="ExistingSurvey_Hidden1" value="@Model.UpdateExisting.ToString()" />
                                <input type="hidden" id="RePublishSurveyName" value="" name="RePublishSurveyName" />
                            </div>
                        </div>






                        <div id="DownLoadDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center;display:none; visibility:collapse;margin:1em">

                            <h1>Download responses</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            

                            <div class="accountdiv col-md-10">

                                @*<p style="text-align:center;margin-top: 0;margin-bottom: 0px; font-size: 9pt; font-weight:bold;">
                Epi Info Web Survey Download Tool (.CSV)
            </p>
            <br><br>
            <p style="text-align:right;margin-top: 0;margin-bottom: -29px; font-size: 9pt; font-weight:bold;">* indicates required fields</p>*@

                                <div>
                                    @*<label class="accountlabel" id="OrgKeylabel">*Organization Key:</label><br>
                @Html.TextBoxFor(m => m.OrganizationKey, new { @class = "Account" }) <br>
                @Html.ValidationMessageFor(m => m.OrganizationKey, null, new { @class = "required" })<br>*@

                                    <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                    @Html.DropDownListFor(m => m.SurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey", new { @class = "Account" })<br>

                                    @Html.ValidationMessageFor(m => m.SurveyKey, null)
                                    <br />
                                    @if (!Model.IsAuthenticated)
                                    {
                                        <label class="accountlabel" id="SecurityTokenlabel"><span style="color:#900000;">*</span> Security Token:</label><br>
                                        /**/

                                        @Html.TextBoxFor(m => m.UserPublishKey, new { @class = "Account" }) <br>
                                        @Html.ValidationMessageFor(m => m.UserPublishKey, null)<p id="DownloadError" class="requiredField"></p><br>

                                    }

                                    <label class="accountlabel" id="FileName1"><span style="color:#900000;">*</span> Survey Mode:</label><br>


                                    @Html.DropDownListFor(model => model.SurveyMode, new SelectList(
                                           new List<Object> { new { value = "0", text = "Draft" }, new { value = "1", text = "Final" }, }, "value", "text", 2), new { @class = "Account" })<br>
                                    @Html.ValidationMessageFor(m => m.SurveyMode, null)
                                    <br />
                                    <label class="accountlabel" id="FileName2"><span style="color:#900000;">*</span> File Name:</label><br>

                                    @Html.TextBoxFor(m => m.FileName, new { @class = "Account" }) <br>
                                    @Html.ValidationMessageFor(m => m.FileName, null)

                                </div>
                                @*<div id="spinner">
                Working on your request...
            </div>*@

                                <br />

                                @* <input class="submits create " type="submit" onclick=" clear();  " name="DownLoadResponse" id="DownLoadResponse" value="DownLoad" style="margin-right:90px;" />*@


                                <input class="submits create " type="button" onclick="  GetJsonResponse();clear();   " name="DownLoadResponse" id="DownLoadResponse" value="DownLoad" style="margin-right:90px;" />

                            </div>
                        </div>



                        <div id="SendEmailDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>Send Email With Survey Link</h1>
                            <p id="RequiredLable" class="requiredField">* indicates required fields</p>
                            <div class="accountdiv col-md-10">

                                <div>

                                    <label class="accountlabel" id="FilePath"><span style="color:#900000;">*</span> Excel Email list:</label> <a onclick="OpenFile()" style="font-size:14px;text-decoration:none!important" href="~/Content/Text/EmailList.xlsx">Excel Template (Email List)</a><br>
                                    @*<input id="Path" class="Account" type="text" value=""   >*@

                                    @Html.TextBoxFor(m => m.EmailFilePath, new { @class = "Account Path2" })

                                    @*<label for="file-upload" class="submits create"   onclick="javascript: document.getElementById('Newfile').click();">
                                            Browse
                                        </label>*@
                                    <input for="file-upload" class="submits create" style="width:70px;" type="button" id="PublishButton" onclick="javascript: document.getElementById('Newfile2').click();" value="Browse" />

                                    <br>

                                    @Html.ValidationMessageFor(m => m.EmailFilePath, null, new { @class = "required " })
                                    <input id="Newfile2" type="file" style='visibility: hidden;' name="Newfile2" accept=".xls,.xlsx,.csv" onchange="ChangeText(this, 'Path2');" />


                                    <br />

                                    <label class="accountlabel" id="SurveyIdlabel"><span style="color:#900000;">*</span> Survey Id:</label><br>


                                    @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey", new { @class = "Account" })<br>

                                    @Html.ValidationMessageFor(m => m.EmailSurveyKey, null)
                                    <br />
                                    @if (!Model.IsAuthenticated)
                                    {
                                        <label class="accountlabel" id="SecurityTokenlabel"><span style="color:#900000;">*</span> Security Token:</label><br>

                                        @Html.TextBoxFor(m => m.EmailUserPublishKey, new { @class = "Account" }) <br>
                                        @Html.ValidationMessageFor(m => m.EmailUserPublishKey, null)<br>
                                    }


                                    <input data-val="false"
                                           id="IsBulk"
                                           name="IsBulk"
                                           type="checkbox"
                                           value="true" />
                                    <label class="accountlabel" id="FilePath">Bulk (To generate multiple response URL's for one email address.)<a onclick="OpenFile()" style="font-size:14px;text-decoration:none!important" href="~/Content/Text/EmailList-Bulk.xlsx">Excel Template (Bulk Email List)</a></label>
                                </div>




                                <input class="submits create" type="submit" onclick="clear()" name="SendEmail" id="SendEmail" value="Send Email" style="margin-right:90px;" />
                                @*<button type="submit" class="btn btn-primary  " name="SendEmail" id="SendEmail" value="Send Email" data-loading-text="<i class='fa fa-spinner fa-spin '></i> Processing Order">Submit Order</button>*@


                            </div>

                        </div>



                        <div id="SetJsonDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            @*<input class="submits create " type="submit" name="SetJson" id="SetJson" value="Set Json" style="margin-right:90px;" />*@
                        </div>


                        <div id="ViewRecordsDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">
                            <h1>View Survey Responses</h1>

                            <div class="accountdiv col-md-10">

                                <div>



                                </div>


                                <a href="@Model.ViewRecordsURL" target="_blank" style=" height:23px;cursor:pointer;color: white !important; background-color:#1d60ac;font-weight: bold" class="navLink publishExpand">
                                    <img style="display:none" src="~/Content/images/Toggle-expand-alt_green.png" />
                                    <img style="display:none" src="~/Content/images/Toggle-collapse-alt_green.png" />
                                    Launch Data Viewer
                                </a>

                                @*<input class="submits create" type="button" name="ViewRecords" id="ViewRecords" value="View Records" style="margin-right:90px;" />*@


                            </div>
                        </div>


                        <div id="DashboardDiv" class="contentContainer" style="margin-bottom: 100px; align-self:center ;display:none; visibility:collapse;margin:1em">

                            <h1>Survey Dashboard</h1>

                            <div class="accountdiv col-md-pull-12">


                                @Html.DropDownListFor(m => m.EmailSurveyKey, new SelectList(ViewBag.SurveyNameList1, "Value", "Text", 0), "Select Survey To View Dashboard", new { @class = "Account Dashboard" })

                                <script>
                                    function FormatDate(DateString)
                                    {
                                            var date = new Date(DateString);
                                            var result = ((date.getMonth().toString().length > 1) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + '/' + ((date.getDate().toString().length > 1) ? date.getDate() : ('0' + date.getDate())) + '/' + date.getFullYear()
                                            return result;
                                    }
                                    function FormatDate2(date)
                                    {
                                        var newdate = date.split("/")

                                        return newdate[2] + "-" + newdate[0] +"-"+newdate[1]
                                    }
                                     function GetDashboardInfo(SurveyId)
                                     {


                                                    var ActionUrl = '@Url.Action("GetDashboardInfo", "SurveyManager")' + '?surveyid=' + SurveyId;

                                                    $.ajax({
                                                        url: ActionUrl,
                                                        type: 'POST',
                                                        contentType: 'application/json; charset=utf-8',
                                                        dataType: "json",
                                                        async: false,
                                                        success: successFunc,
                                                        error: errorFunc
                                                    });
                                                    function successFunc(data)
                                                    {

                                                        var obj = JSON.parse(data);
                                                       // alert(obj.RecordCountPerDate[obj.DateList[1]]);

                                                        //alert(obj.DateList.length);

                                                        var _dateArray= new Array("x");
                                                        var _countArray=new Array("Record Count");
                                                        for (var i = 0; i < obj.DateList.length; i++)
                                                        {

                                                            _dateArray.push(FormatDate2(obj.DateList[i]))
                                                            _countArray.push(obj.RecordCountPerDate[obj.DateList[i] ])
                                                        }




                                                         $('#SurveyName1').html(obj.SurveyInfo.SurveyName)
                                                         $('#StartDate1').html(FormatDate(obj.SurveyInfo.StartDate))
                                                        $('#CloseDate1').html(FormatDate(obj.SurveyInfo.ClosingDate))

                                                        if (obj.SurveyInfo.IsDraftMode) {
                                                            $('#SurveyMode1').html('Draft')
                                                        } else {
                                                             $('#SurveyMode1').html('Final')
                                                        }
                                                         $('#RecordsCount').html(obj.RecordCount)

                                                       var chart = c3.generate({
                                                                                data: {
                                                                                    x: 'x',
                                                                            //        xFormat: '%Y%m%d', // 'xFormat' can be used as custom format of 'x'
                                                                                    columns: [

                                                                                        _dateArray,_countArray
                                                                                    ]
                                                                                },
                                                                                axis: {
                                                                                    x: {
                                                                                        type: 'timeseries',
                                                                                        tick: {
                                                                                            format: '%m/%d/%Y',
                                                                                            rotate: 90,
                                                                                            multiline: false
                                                                                        }
                                                                                    }
                                                                                }
                                                       }




                                                       );






                                                        var piechart = c3.generate({
                                                            bindto: '#piechart',
                                                            data: {
                                                                columns: [
                                                                    ['Submited', obj.SubmitedRecordCount],
                                                                    ['Saved', obj.SavedRecordCount],
                                                                    ['Started', obj.StartedRecordCount],
                                                                    ['Downloaded', obj.DownloadedRecordCount]
                                                                ],
                                                                type: 'pie'
                                                            },
                                                            pie: {
                                                                label: {
                                                                    format: function (value, ratio, id) {
                                                                        return d3.format('#')(value);
                                                                    }
                                                                }
                                                            }
                                                        });


                                                    }
                                                    function errorFunc(data) {
                                                        alert('failed');
                                                    }
                                                }
                                    $(".Dashboard").change(function () {



                                        var str = "";
                                        $(".Dashboard option:selected").each(function () {
                                          str += $(this).val() + " ";
                                        });

                                        GetDashboardInfo(str);




                                    });
                                </script>


                                <br>
                                <br>
                                <h1>Record Count</h1>
                                <h1 id="RecordsCount">0</h1>

                                <br>
                                <br>
                                <div class="row">
                                    <div class="col-md-4" id="piechart" style="float:left ; "></div>

                                    <div class="col-md-7" id="chart" style="float:left; "></div>
                                </div>
                                <br>
                                <br>

                                <div>


                                    <table>
                                        <tr>
                                            <th>Survey Name</th>
                                            <th>Start Date</th>
                                            <th>Close Date</th>
                                            <th>Survey Mode</th>
                                        </tr>
                                        <tr>
                                            <td id="SurveyName1">Survey Name</td>
                                            <td id="StartDate1">9/99/9999</td>
                                            <td id="CloseDate1">9/9/9999</td>
                                            <td id="SurveyMode1">-----</td>
                                        </tr>

                                    </table>

                                </div>



                            </div>
                        </div>



                        @*</div>*@
                    </div>







                </div>
                @*</div>*@
            }
        }
        else
        {
            if (Model.SuccessfulPublish)
            {

                <div id="SuccessfullPublishcontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">



                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SuccessfullPublish">Your Form  has been published!  </label><br>


                        </p>
                        <p>
                            <label class="accountlabel" style=" font-size 9pt; font-weight:bold; color:red " id="PublishedSurveyInfo">Important: </label>
                            <label id="PublishedSurveyInfo">Please copy and save the Form ID and Security Token to download collected responses. </label><br>

                        </p>
                        <p>
                            <textarea id="FormInfo" readonly="readonly" style="width:600px;height:100px ; align-content:flex-end">

                                Survey Name: @Model.SurveyName
                                Survey Id: @Model.SurveyKey
                                Security Token: @Model.UserPublishKey
                                Survey URL: @Model.SurveyURL
                                Survey End Date: @Model.EndDate
                                @if (ViewBag.IsNewOrg)
                                {
                                    @ViewBag.Org  @Model.OrganizationKey
                                }
                            </textarea>

                        </p>


                        <p>
                            <input class="submits create" onclick="OpenSurvey('@Model.SurveyURL')" type="button" id="LaunchSurvey" value="Launch Survey" />
                            <input class="submits create  " type="button" onclick="copyToClipboard()" id="Copy" value="Copy All to Clipboard" />
                        </p>

                    </div>



                </div>
            }

            if (Model.SuccessfullySentEmail)
            {
                <div id="SuccessfullPublishcontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">
                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SuccessfullPublish">  Emails have been successfully sent! </label><br>


                        </p>

                    </div>
                </div>
            }

            if (Model.JsonIsSet)
            {
                <div id="SuccessfullJsoncontent" style="margin:1em;">

                    <div class="accountdiv" style="margin-bottom: 100px;">
                        <p style="text-align:left;margin-top: 0; font-size: 9pt; font-weight:bold; color:green">

                            <label class="accountlabel" id="SetJsonSuccessfull">  Json column have been successfully sent! </label><br>


                        </p>

                    </div>
                </div>
            }





        }
        <input type="hidden" id="RePublishDivState" value="@Model.RePublishDivState.ToString()" name="RePublishDivState" />
        <input type="hidden" id="PublishDivState" value="@Model.PublishDivState.ToString()" name="PublishDivState" />
        <input type="hidden" id="DownLoadDivState" value="@Model.DownLoadDivState.ToString()" name="DownLoadDivState" />
        <input type="hidden" id="SendEmaiDivState" value="@Model.SendEmaiDivState.ToString()" name="SendEmaiDivState" />
        <input type="hidden" id="SetJsonDivState" value="@Model.SetJsonDivState.ToString()" name="SetJsonDivState" />
        <input type="hidden" id="ViewRecordsDivState" value="@Model.ViewRecordsDivState.ToString()" name="ViewRecordsDivState" />
        <input type="hidden" id="JsonHeadder" value="" name="JsonHeadder" />

    }
    <div id="TermsDialog">
        @Html.Raw(ViewData["TermOfUse1"].ToString())
    </div>

</div>
